// Z indexes
$zIndexPieces: 0; // Lets say 0-100 for pieces
$zIndexPieceActive: 101;
$zIndexMoves: 102;

// Animations
$pieceMoveAnimation: 500ms ease;
$pieceFadeAnimation: 1000ms ease;
$tileFadeAnimation: 1500ms ease;
$moveBackgroundPulse: 2000ms infinite ease-in-out;

// Colors
$color-black: #302e2d;
$color-red: #9b414a;
$color-beige: #f2e7de;

// Sizes
$tile-border-radius: 15%;
$tile-default-scale: 0.9;
$move-highlight-size: 10px;

// Mixins
@mixin generate-pulsate($name, $color) {
  @keyframes #{$name} {
    0%, 100% {
      background-color: rgba(transparent, 0);
    }
    50% {
      background-color: rgba($color, 0.75);
    }
  }
}

// Define some keyframe animations for red and black pulses
@include generate-pulsate("pulsate-red", $color-red);
@include generate-pulsate("pulsate-black", $color-black);

html, body{
	background-color: darken(desaturate($color-beige, 40%), 35%);
	overflow: hidden;
}

.turn-hint{
	position: relative;
	z-index: 999;

	// Size it
	height: 20px;
	width: 200px;
	border-radius: 5px;


	// Center content
	display: flex;
	justify-content: center;
	align-items: center;

	// Color it
	border-style: solid;
	border-width: 2px;
	color: $color-beige;

	// Set font
	font-family: sans-serif;
	font-size: 12px;

	// Center it 
	margin-left: auto;
	margin-right: auto;

	$border-darken-percent: 10%;
	&.red{
		background-color: $color-red;
		border-color: darken($color-red, $border-darken-percent);
		&::after{
			content: 'Red to move';
		}
	}

	&.black{
		background-color: $color-black;
		border-color: darken($color-black, $border-darken-percent);
		&::after{
			content: 'Black to move';
		}
	}
}

.game-area{
	display: flex;
    justify-content: center;
	transform: perspective(500px) rotateX(7deg) rotateY(0deg);
}

.board{

	// Constants
	$height: 5;
	$width: 5;

	// Common
	$tileHeightPercent: calc(100% / $height);
	$tileWidthPercent: calc(100% / $width);

	display: inline-block;
	position: relative;

	$minBoardSizePixels: 300px;
	$maxBoardSizePixels: 900px;
	min-height: $minBoardSizePixels;
	min-width: $minBoardSizePixels;
	max-width: $maxBoardSizePixels;
	max-height: $maxBoardSizePixels;

	width: 50%;

	// Position pieces and tiles based on x/y
	piece, tile, move{
			display: inline-block;

			height: $tileHeightPercent;
			width: $tileWidthPercent;

			position: absolute !important;
			@for $x from 0 through $width {
				&[data-x='#{$x}']{
					left: #{$x * $tileWidthPercent};
				}
			}
			@for $y from 0 through $height {
				&[data-y='#{$y}']{
					top: #{100% - ($y + 1) * $tileHeightPercent};
				}
			}

			position: relative;
			text-align: center;
	}

	&:after {
		content: "";
		display: block;
		padding-bottom: 100%;
	}

	.tiles{
		tile{

			border: 1px solid $color-black;	
			background-color: $color-beige;
			border-radius: $tile-border-radius;
			transform-origin: center center;

			// Style in-play tiles
			&[data-in-play="true"]{
				transform: scale($tile-default-scale);
				opacity: 1.0;
			}

			// Style removed tiles
			&[data-in-play="false"]{
				opacity: 0.0;
				transform: scale(0.1);
				border: none !important;
			}

			transition: 
				opacity #{$tileFadeAnimation},
				transform #{$tileFadeAnimation};
		}
	}

	.pieces{
		position: absolute;
		height: 100%;
		width: 100%;		
		piece{

			border-radius: 50%;

			border: 1px solid $color-black;

			transform-origin: center center;

			// Style pieces by owner
			&[data-owner="black"]{
				background-color: $color-black;
			}
			&[data-owner="red"]{
				background-color: $color-red;
			}

			// Style pieces by height
			&[data-height="1"]{
				transform: scale(0.7);
				z-index: $zIndexPieces + 1;
			}
			&[data-height="2"]{
				z-index: $zIndexPieces + 2;
				transform: scale(0.5);
			}
			&[data-height="3"]{
				z-index: $zIndexPieces + 3;
				transform: scale(0.3);
			}

			// Style pieces by abilit to move right now
			&[data-can-move="true"]{
				cursor: pointer;
			}
			&[data-can-move="false"]{
				cursor: not-allowed;
				opacity: 0.75;
			}

			// Style in-play pieces
			&[data-in-play="true"]{
				
			}

			// Style removed pieces
			&[data-in-play="false"]{
				opacity: 0.0 !important;
				transform: scale(0.0);
				border: none !important;
			}

			transition: 
				top #{$pieceMoveAnimation}, 
				left #{$pieceMoveAnimation},
				opacity #{$pieceFadeAnimation},
				transform #{$pieceMoveAnimation};

			&.last-active-piece{
				z-index: $zIndexPieceActive;
			}
		
		}
	}

	.moves{

		move{
			z-index: $zIndexMoves;
			cursor: pointer;

			// Size it like the tile underneath it
			transform: scale($tile-default-scale + 0.02);

			// Round it off like the tile underneath it
			border-radius: $tile-border-radius;

			// Give it a border and background
			&[data-owner="black"]{	
				box-shadow: inset 0 0 0 $move-highlight-size $color-black;
				animation: pulsate-black $moveBackgroundPulse;
			}
			&[data-owner="red"]{
				box-shadow: inset 0 0 0 $move-highlight-size $color-red;
				animation: pulsate-red $moveBackgroundPulse;
			}
			
		}

	}

}

@keyframes pulsate {
  0%, 100% {
    background: linear-gradient(to bottom, rgba(255, 0, 0, 0), rgba(255, 0, 0, 1));
  }
  50% {
    background: linear-gradient(to bottom, rgba(255, 0, 0, 1), rgba(255, 0, 0, 1));
  }
}

.pulsating-bg {
  animation: pulsate 3s infinite ease-in-out;
}